#title: JS 的约定
#author:zozoh
#index:0,1
-----------------------------------------------------------------------------------------
UI
    
    # UI 是满足特殊规则的 JS 对象
    # UI 有给定选区，并且仅仅影响给定选区
    # UI 可以嵌套，但是同一类型的 UI 如果嵌套，除非特别保证，否则可能发生不可预知的错误

    一个 UI 的声明可以类似下面的代码:
    {{{
    # ui_xxxx.js
    #-------------------------------------------------------------------
    (function($, ui){  # <- 进入 UI 声明的闭包
    ui('UI类型名', {   # 扩展的所有函数，运行时，this 皆为 bind 实例本身
        keepDom : true,                   # 是否初始化的时候，清除选区, 只有等于true 才不清除
        extend  : "父UI类型名",           # 可以继承父 UI 的特质
                                          # 当然父 UI 必须存在先
        on_init : function(){},           # 初始化选区内的 DOM 结构，
                                          #   ao 为锚值对象
        on_show : function(){...},        # 根据 bind 的 option 来显示选区内容
        on_resize : function(w, h){...},  # 当选区被改变大小时调用，w, h 为新的大小
        on_depose : function(){...},      # 当UI被销毁时调用的方法
        on_listen : function(){...},      # 当UI开始监听用户事件
                                          # 这个选项不是必须的，一旦声明，events 段将被无视
        on_ready  : function(){...},      # 当所有的初始化流程都进行完毕，将调用这个方法
        gasket : function(nm){...},       # 根据一个Name，返回一个 jQuery 对象
                                          # null 表示扩展点不存在
        dft_option : {...},               # 提供了默认的配置信息
        events : {     # 本选区具体都委派了哪些事件
            '[click:]选择器' :  function(e){...}   # this 为选择器匹配了的 DOM 对象
            ...
        },
        methods : {   # 本UI要支持的外部方法
            doSomething : function(args){...}  # args 将由调用者来调用  
        }
    });
    })(window.jQuery, window.NutzUI); # <- 闭包结束

    # 取消一个 UI 的定义
    ui('UI类型名', null);
    }}}

    一个 UI 定义的实例化，可以是类似下列代码:
    {{{
    # 为某个选取绑定一个 UI
    # 实际上会依次触发 on_init -> on_show -> on_resize -> on_listen -> on_ready
    var bind = ui('UI类型名').bind(selector, {...配置信息...});
    var bind = ui('UI类型名').bind(parentBind, "扩展点名称", {...配置信息...});

    # 一个 UI 的配置信息可以是任意形式，不过 NutzUI 框架如果发现
    {
        ...
        data    : function(callback){},     # this 为 theBind 对象
        ...
    }
    # 则会预先执行一下数据的获取，对于这个函数，NutzUI 框架是这么理解的：
    #   如果有返回值，则表示不是异步的
    #   否则你可以什么都不返回，并将数据对象传给 callback 函数
    #   UI 框架会自动适应的你决定
    #   当数据获取完毕后，UI 框架会将数据记录到 bind 对象上

    # 一个 bind 对象会有下列字段
    {
        __nutz_ui_bind__ : true,
        ID : 'UI类型名_0',       # 整个 window 声明周期内唯一的 ID 
        typeName : 'UI类型名',   # 对应的 UI 类型
        gasketName : null,       # 本控件绑定在父控件的哪个 gasket 上，null 表示根控件:w
        gasketPath : "/",        # 本控件从根控件开始的 gasket 路径，"/" 表示根控件
        ao : {...},              # 网页的锚值对象
        data : {...},            # 通过 ui.option.data 函数获取的数据对象
        option : {...},          # 本次绑定的配置信息
        selector : ...,          # 一个选择器，或者 "@bind.ID:名称"
        selection: $(selector),  # 一个 jQuery 对象，持有当前选区
        children : {             # 子绑定的列表，每个绑定都有一个固定的名称
            chute : {...},
            menu  : {...},
            arena : {...}
        }
    }

    # 取消某个 UI 的绑定，会触发相关 UI 的 on_depose 方法
    if(ui(bind).unbind())
        alert("移除成功 ^_^");

    # 可以通过 jQuery Data 从任何 DOM 中取回 UI 的绑定和自己的配置信息
    var bind = $("选择器").data(ui.BIND);
    var opt = $("选择器").data(ui.OPTION);

    # 主动控制 UI 的显示
    ui(bind).resize();    # <- this 为 ui 实例本身
    ui(bind).depose();    # 标准的安全销毁 UI 的方法，当 UI unbind 的时候会调用
    ui(bind).xxxxx();     # 其他自定义方法
    }}}
    这里需要注意的是
     # 一个选区只能被一个 UI 实例绑定
     # 如果对一个选区反复执行 bind(selector, ...)，那么只会返回第一次 bind 的实例对象
         # 除非你对一个选区，执行了 ui(bind).depose()
         # 当然，如果你给了一个新的配置对象
            * 这个配置对象会对这个 bind 实例生效的
            * 同时，UI 对象会执行一边初始化流程

    UI 系统的数据结构为:
    {{{
    window
        NutzUI : {
            version : '0.1'     # 版本
            binds   : {         # 所有生效的绑定
                "UI类型A_0" : {...},
                "UI类型A_1" : {...}
            }
            types   : {
                "UI类型A" : {...},
                "UI类型B" : {...}
            }
        }
    }}}
    
    
-----------------------------------------------------------------------------------------
容器
    
    # 容器是一种 UI
    # 基本上，容纳了子 UI 的 UI 都被称为容器
    # 布局是可以嵌套子布局
    # 对话框，遮罩等一定要与 window 对象绑定
    # 除以以外，没啥特殊性了

-----------------------------------------------------------------------------------------
帮助函数
    
    # 帮助函数的 this 均无意义
    # 帮助函数由 window.Nutz.util('包名', {...})
    # 一个包一个 js 文件，当然也可以多个 js 文件对应一个包

    帮助函数的结构基本类似:
    {{{
    window
        NutzUtil  : {
            time  : {...},      # 日期时间相关的函数集合
            local : {...},      # 本地存储
            obj   : {...},      # 对于 JS 对象的操作，比如 dump 等
            json  : {...},      # JSON 相关操作
            str   : {...},      # 字符串相关操作
            win   : {...},      # 对于 window 对象特殊的操作
            color : {...},      # 对于颜色值的操作
            dom   : {...},      # 增强 dom 元素或者 jq 对象的
            alg   : {...},      # 提供特殊的算法
            be    : {...},      # 提供一些特殊行为或者显示效果
                                # 比如 editId, blinkIt, removeIt 等
        }
    }}}

    帮助函数的调用方法:
    {{{
    # 直接方式
    NutzUtil.json.toJson({x:12, y:100});
    # 或者采用别名方式
    (function($z){
        $z.json.toJson({x:12, y:100});
    })(window.NutzUtil);
    }}}

    



